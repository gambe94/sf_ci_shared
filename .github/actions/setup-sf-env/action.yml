name: 'üöÄ Setup Salesforce Environment'
description: |
  Comprehensive setup action for Salesforce CI/CD workflows.
  
  Features:
  ‚Ä¢ Node.j    - name: Cache Node Dependencies installation with caching
  ‚Ä¢ Salesforce CLI installation
  ‚Ä¢ Plugin management with retry logic
  ‚Ä¢ Input validation and error handling
  ‚Ä¢ Detailed progress reporting
  
  Perfect for automating Salesforce development workflows.
author: 'gambe94'

inputs:
  node-version:
    description: 'Node.js version to install'
    required: false
    default: '18'
  sf-cli-version:
    description: 'Salesforce CLI version to install (latest, or specific version like 2.15.9)'
    required: false
    default: 'latest'
  plugins:
    description: 'Comma-separated list of SF CLI plugins to install'
    required: false
    default: '@salesforce/sfdx-scanner,@salesforce/plugin-packaging,@salesforce/plugin-data,@salesforce/plugin-apex,@salesforce/plugin-source'
  cache-dependencies:
    description: 'Whether to cache Node.js dependencies'
    required: false
    default: 'true'
  install-dependencies:
    description: 'Whether to run npm install if package.json exists'
    required: false
    default: 'true'
  working-directory:
    description: 'Working directory for npm operations'
    required: false
    default: '.'

outputs:
  node-version:
    description: 'Installed Node.js version (e.g., v18.20.8)'
    value: ${{ steps.node-info.outputs.version }}
    
  sf-cli-version:
    description: 'Installed Salesforce CLI version (e.g., @salesforce/cli/2.15.9)'
    value: ${{ steps.sf-info.outputs.version }}
    
  plugins-installed:
    description: 'Comma-separated list of successfully installed plugins'
    value: ${{ steps.plugins-info.outputs.plugins }}
    
  plugins-failed:
    description: 'Comma-separated list of plugins that failed to install'
    value: ${{ steps.plugins-info.outputs.failed-plugins }}
    
  cache-hit:
    description: 'Whether Node.js dependencies were restored from cache (true/false)'
    value: ${{ steps.cache-node.outputs.cache-hit }}
    


runs:
  using: 'composite'
  steps:
    - name: ‚è±Ô∏è Initialize Setup Timer
      id: timing
      shell: bash
      run: |
        echo "‚è±Ô∏è Starting Salesforce environment setup..."
        echo "start-time=$(date +%s)" >> $GITHUB_OUTPUT
        echo "Started at: $(date)"
        echo ""
        
    - name: Validate Configuration
      shell: bash
      run: |
        # Validate Node.js version format
        if ! echo "${{ inputs.node-version }}" | grep -E '^[0-9]+(\.[0-9]+)?(\.[0-9]+)?$|^latest$|^lts$'; then
          echo "‚ùå Invalid Node.js version: ${{ inputs.node-version }}"
          exit 1
        fi
        
        # Validate SF CLI version format
        if ! echo "${{ inputs.sf-cli-version }}" | grep -E '^[0-9]+(\.[0-9]+)?(\.[0-9]+)?$|^latest$'; then
          echo "‚ùå Invalid SF CLI version: ${{ inputs.sf-cli-version }}"
          exit 1
        fi
        
        # Validate working directory exists
        if [ ! -d "${{ inputs.working-directory }}" ]; then
          echo "‚ùå Working directory does not exist: ${{ inputs.working-directory }}"
          exit 1
        fi

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ inputs.node-version }}
        cache: ${{ inputs.cache-dependencies == 'true' && 'npm' || '' }}
        cache-dependency-path: ${{ inputs.working-directory }}/package-lock.json

    - name: Get Node.js Version
      id: node-info
      shell: bash
      run: |
        NODE_VERSION=$(node --version)
        NPM_VERSION=$(npm --version)
        echo "version=$NODE_VERSION" >> $GITHUB_OUTPUT
        echo "npm-version=$NPM_VERSION" >> $GITHUB_OUTPUT
        echo "Node.js: $NODE_VERSION, npm: $NPM_VERSION"

    - name: üíæ Cache Node.js Dependencies
      if: inputs.cache-dependencies == 'true'
      id: cache-node
      uses: actions/cache@v4
      with:
        path: |
          ${{ inputs.working-directory }}/node_modules
          ~/.npm
        key: ${{ runner.os }}-node-${{ hashFiles(format('{0}/package-lock.json', inputs.working-directory)) }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Node Dependencies
      if: inputs.install-dependencies == 'true' && steps.cache-node.outputs.cache-hit != 'true'
      shell: bash
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f "package-lock.json" ]; then
          echo "üì¶ Installing dependencies with npm ci..."
          npm ci
        elif [ -f "package.json" ]; then
          echo "üì¶ Installing dependencies with npm install..."
          npm install
        else
          echo "‚ÑπÔ∏è No package.json found, skipping npm install"
        fi

    - name: Install Salesforce CLI
      shell: bash
      run: |
        echo "Installing Salesforce CLI ${{ inputs.sf-cli-version }}..."
        
        if [ "${{ inputs.sf-cli-version }}" = "latest" ]; then
          npm install --global @salesforce/cli@latest
        else
          npm install --global @salesforce/cli@${{ inputs.sf-cli-version }}
        fi

    - name: Verify Salesforce CLI
      id: sf-info
      shell: bash
      run: |
        SF_VERSION=$(sf version --verbose --json | jq -r '.cliVersion' 2>/dev/null || sf version | head -1)
        echo "version=$SF_VERSION" >> $GITHUB_OUTPUT
        echo "Salesforce CLI: $SF_VERSION"

    - name: Install SF CLI Plugins
      if: inputs.plugins != ''
      shell: bash
      run: |
        echo "Installing plugins..."
        
        # Convert comma-separated list to array
        IFS=',' read -ra PLUGINS <<< "${{ inputs.plugins }}"
        
        INSTALLED_PLUGINS=()
        FAILED_PLUGINS=()
        
        for plugin in "${PLUGINS[@]}"; do
          # Trim whitespace
          plugin=$(echo "$plugin" | xargs)
          
          if [ -n "$plugin" ]; then
            echo "Installing: $plugin"
            
            # Try to install plugin with timeout and retry
            for attempt in 1 2 3; do
              if timeout 300 sf plugins install "$plugin" 2>&1 >/dev/null; then
                INSTALLED_PLUGINS+=("$plugin")
                break
              else
                if [ $attempt -eq 3 ]; then
                  echo "Failed: $plugin"
                  FAILED_PLUGINS+=("$plugin")
                else
                  sleep 10
                fi
              fi
            done
          fi
        done
        
        # Report results
        if [ ${#INSTALLED_PLUGINS[@]} -gt 0 ]; then
          echo "Installed: ${INSTALLED_PLUGINS[*]}"
        fi
        
        if [ ${#FAILED_PLUGINS[@]} -gt 0 ]; then
          echo "Failed: ${FAILED_PLUGINS[*]}"
          echo "::warning::Some plugins failed to install: ${FAILED_PLUGINS[*]}"
        fi

    - name: Get Installed Plugins
      id: plugins-info
      shell: bash
      run: |
        # Get list of installed plugins
        PLUGINS_JSON=$(sf plugins --json 2>/dev/null || echo '[]')
        PLUGINS_LIST=$(echo "$PLUGINS_JSON" | jq -r '.[].name' 2>/dev/null | tr '\n' ',' | sed 's/,$//')
        
        echo "plugins=$PLUGINS_LIST" >> $GITHUB_OUTPUT

    - name: ‚è±Ô∏è Calculate Setup Duration
      shell: bash
      run: |
        END_TIME=$(date +%s)
        START_TIME="${{ steps.timing.outputs.start-time }}"
        DURATION=$((END_TIME - START_TIME))
        
        echo "duration=${DURATION}s" >> $GITHUB_OUTPUT
        echo "‚è±Ô∏è Setup completed in ${DURATION} seconds"
        echo ""
        
    - name: üß™ Final System Verification
      shell: bash
      run: |
        echo "üß™ Running comprehensive system verification..."
        echo ""
        
        # Test basic SF CLI functionality
        echo "‚úì Testing core SF CLI commands..."
        sf --help > /dev/null && echo "   ‚úÖ sf --help: OK" || (echo "   ‚ùå sf --help: FAILED" && exit 1)
        sf version > /dev/null && echo "   ‚úÖ sf version: OK" || (echo "   ‚ùå sf version: FAILED" && exit 1)
        
        # Test plugin functionality (non-critical)
        echo "‚úì Testing plugin system..."
        if sf plugins --core > /dev/null 2>&1; then
          echo "   ‚úÖ Plugin system: OK"
        else
          echo "   ‚ö†Ô∏è Plugin system: Limited functionality"
        fi
        
        echo ""
        echo "‚úÖ All verification checks passed successfully!"
        echo ""

    - name: üìä Generate Setup Summary
      shell: bash
      run: |
        {
          echo "## üöÄ Salesforce Environment Setup Complete"
          echo ""
          echo "| Component | Version |"
          echo "|-----------|---------|"
          echo "| Node.js | ${{ steps.node-info.outputs.version }} |"
          echo "| Salesforce CLI | ${{ steps.sf-info.outputs.version }} |"
          echo "| Node Cache Hit | ${{ steps.cache-node.outputs.cache-hit == 'true' && '‚úÖ Yes' || '‚ùå No' }} |"
          echo ""
          echo "### üîå Installed Plugins"
          if [ -n "${{ steps.plugins-info.outputs.plugins }}" ]; then
            IFS=',' read -ra PLUGINS <<< "${{ steps.plugins-info.outputs.plugins }}"
            for plugin in "${PLUGINS[@]}"; do
              echo "- ‚úÖ $plugin"
            done
          else
            echo "- ‚ÑπÔ∏è No plugins installed"
          fi
          echo ""
          echo "### ‚öôÔ∏è Configuration"
          echo "- Working Directory: \`${{ inputs.working-directory }}\`"
          echo "- Dependencies Cached: ${{ inputs.cache-dependencies }}"
          echo "- Auto Install Dependencies: ${{ inputs.install-dependencies }}"
        } >> $GITHUB_STEP_SUMMARY

branding:
  icon: 'package'
  color: 'blue'